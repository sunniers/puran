<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:mvc="http://www.springframework.org/schema/mvc" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:p="http://www.springframework.org/schema/p" 
xmlns:context="http://www.springframework.org/schema/context" 
xmlns:cache="http://www.springframework.org/schema/cache"
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context.xsd 
http://www.springframework.org/schema/mvc 
http://www.springframework.org/schema/mvc/spring-mvc.xsd
http://www.springframework.org/schema/cache
http://www.springframework.org/schema/cache/spring-cache-3.2.xsd">
	 <!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:config.properties" />
	
	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<context:component-scan base-package="com.shdatabank.puruan.controller" />
	
	<bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
		<property name="serializationInclusion" value="NON_NULL" />
	</bean>
	
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="prettyPrint" value="true" />
				<property name="supportedMediaTypes">
					<list>
                		<value>text/html;charset=UTF-8</value>
                		<value>application/json;charset=UTF-8</value>
                		<value>application/x-www-form-urlencoded;charset=UTF-8</value>
                	</list> 
                </property>
				<!-- <property name="objectMapper" ref="objectMapper" /> -->
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<mvc:view-controller path="/" view-name="redirect:/user" />
	<mvc:default-servlet-handler />
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
	

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxUploadSize" value="-1" />
		<property name="maxInMemorySize" value="102400" />
	</bean>

	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionAttribute" value="ex" />
		<property name="warnLogCategory" value="WARN" />
		<property name="defaultErrorView" value="error/500" />
		<property name="defaultStatusCode" value="500" />
		<property name="exceptionMappings">
			<props>
				<prop key="com.fap.exception.NotFoundException">error/404</prop>
			</props>
		</property>
		<property name="statusCodes">
			<props>
				<prop key="error/500">500</prop>
				<prop key="error/404">404</prop>
				<prop key="error/403">403</prop>
				<prop key="error/401">401</prop>
			</props>
		</property>
	</bean>
	
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/resources/html/" p:suffix=".html" />
	-->
	 <!-- 配置freeMarker的模板路径 -->  
    <bean id="freemarkerConfig"  
        class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
        <property name="templateLoaderPath" value="/resources/html/" />  
        <property name="freemarkerVariables">  
            <map>  
                <entry key="xml_escape" value-ref="fmXmlEscape" />  
                  
            </map>  
        </property>  
        <!-- FreeMarker默认每隔5秒检查模板是否被更新，如果已经更新了，就会重新加载并分析模板。 但经常检查模板是否更新可能比较耗时。如果你的应用运行在生产模式下，而且你预期模板不会经常更新，   
            则可以将更新的延迟时间延长至一个小时或者更久。 可以通过为freemarkerSettings属性设置template_update_delay达到这一目的 -->  
        <property name="freemarkerSettings">  
            <props>  
                <prop key="template_update_delay">3600</prop>  
                <prop key="tag_syntax">auto_detect</prop><!-- 设置标签类型 两种：[] 和 <> 。[] 这种标记解析要快些 -->  
                <prop key="default_encoding">UTF-8</prop>  
                <prop key="output_encoding">UTF-8</prop>  
                <prop key="locale">zh_CN</prop>  
                <prop key="date_format">yyyy-MM-dd</prop>  
                <prop key="time_format">HH:mm:ss</prop>  
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
                <prop key="number_format">#</prop><!-- 设置数字格式 以免出现 000.00 -->  
                <prop key="classic_compatible">true</prop><!-- 可以满足一般需要。默认情况变量为null则替换为空字符串，如果需要自定义，写上${empty!"EmptyValue of fbysss"}的形式即可  -->  
                <prop key="template_exception_handler">html_debug</prop><!-- ignore,debug,html_debug,rethrow -->  
            </props>  
        </property>  
        <!-- 一下语句可以也可以配置freemarkerSettings属性，代码更为简洁 -->  
        <!-- <property name="freemarkerSettings" ref="freemarkerConfiguration"></property> -->  
    </bean>  
      
    <bean id="freemarkerConfiguration"  
        class="org.springframework.beans.factory.config.PropertiesFactoryBean">  
        <property name="location" value="classpath:freemarker.properties" />  
        <property name="locations">
            <list>
                <value>classpath:freemarker.properties</value>
                <value>classpath:config.properties</value>
            </list>

        </property>
    </bean>  
  
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />  
  
    <!-- 配置freeMarker视图解析器 -->  
    <!-- FreeMarker视图解析 如返回student,在这里配置后缀名ftl和视图解析器 -->  
    <bean id="viewResolver"  class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">  
  
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>  
        <property name="cache" value="true"/>  
        <property name="suffix" value=".html" />  
        <property name="contentType" value="text/html;charset=UTF-8" />  
        <property name="requestContextAttribute" value="request" />  
        <!-- 将请求和会话属性作为变量暴露给FreeMarker模板使用。要做到这一点，可以设置exposeRequestAttributes或者exposeSessionAttributes为true -->  
        <property name="exposeRequestAttributes" value="true" />  
        <property name="exposeSessionAttributes" value="true" />  
        <!-- 使用这些宏，必须设置FreeMarkerViewResolver的exposeMacroHelpers属性为true -->  
        <property name="exposeSpringMacroHelpers" value="true" />  
    </bean>  
    
	<!-- Spring 统一日志处理   LogInterceptor拦截器 配置 -->     
	<bean id="logLnterceptor" class="com.shdatabank.puruan.exception.LogInterceptor"/>  
	<!-- Spring 统一异常处理  ExceptionAdvisor配置 -->  
	<bean id="exceptionHandler" class="com.shdatabank.puruan.exception.ExceptionAdvisor"></bean>    
	<!-- Bean自动代理处理器 配置-->    
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator" >  
	   <property name="beanNames">  
	    <list>
	        <!-- 配置需要进行日志记录的Service和Dao -->  
	        <value>Dao</value>  
	        <!-- 配置所有Service结尾命名的Bean，即所有Service层的类都要经过exceptionHandler异常处理类 -->   
	        <value>*Service</value>  <!-- Service层的Bean ID 命名要以Service结尾 -->  
	    </list>  
	   </property>  
	   <property name="interceptorNames">  
	    <list>  
	         <value>exceptionHandler</value>  
	         <value>logLnterceptor</value>  
	    </list>  
	   </property>  
	</bean>  
	<!-- ——————————————————Spring 统一日志处理 + 统一异常处理  配置结束—————————————悲伤的分隔线—————————— --> 	
	<!-- 启用缓存注解功能  -->
    <cache:annotation-driven cache-manager="ehCacheManager" proxy-target-class="true" />
	<!-- Spring提供的基于的Ehcache实现的缓存管理器 -->
    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml" />
        <property name="shared" value="true" />
    </bean>
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="cacheManagerFactory" />
    </bean> 
</beans>